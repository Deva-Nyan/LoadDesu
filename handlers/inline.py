# handlers/inline.py
import logging
from uuid import uuid4
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultCachedPhoto
from telegram.error import BadRequest
from telegram.ext import ContextTypes
from state import DOWNLOAD_TASKS
from config import PLACEHOLDER_PHOTO_ID

def _mini_kb(task: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ö° –ê–≤—Ç–æ–≤—ã–±–æ—Ä", callback_data=f"auto|{task}"),
            InlineKeyboardButton("üé¨ –í–∏–¥–µ–æ",     callback_data=f"vauto|{task}"),
        ],
        [
            InlineKeyboardButton("üéµ –ê—É–¥–∏–æ",     callback_data=f"aauto|{task}"),
            InlineKeyboardButton("‚ûï –ë–æ–ª—å—à–µ",     callback_data=f"more|{task}"),
        ],
    ])

async def inline_query(update, context: ContextTypes.DEFAULT_TYPE):
    url = (update.inline_query.query or "").strip()
    if not url.startswith("http"):
        return

    task = uuid4().hex[:8]
    DOWNLOAD_TASKS[task] = url

    kb = _mini_kb(task)

    # –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –≠–¢–û–ì–û –±–æ—Ç–∞ file_id!
    result = InlineQueryResultCachedPhoto(
        id=task,
        photo_file_id=PLACEHOLDER_PHOTO_ID,
        caption=f"–°—Å—ã–ª–∫–∞: {url}",
        reply_markup=kb,
    )
    try:
        await update.inline_query.answer([result], cache_time=0, is_personal=True)
        logging.info(f"[INLINE] task={task} show mini-menu for {url}")
    except BadRequest as e:
        logging.error(f"[INLINE] CachedPhoto failed: {e}")
        # –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–¥–∞–≤–∞—Ç—å; –ª–∏–±–æ —Å–¥–µ–ª–∞—Ç—å Article-—Ñ–æ–ª–ª–±–µ–∫,
        # –Ω–æ –ø–æ–º–Ω–∏: Article –Ω–µ–ª—å–∑—è –ø–æ—Ç–æ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –º–µ–¥–∏–∞ edit_message_media.
        # –õ—É—á—à–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º, —á–µ–º –ø–∞–¥–∞—Ç—å –≤ Article.
